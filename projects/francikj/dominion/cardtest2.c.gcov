        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Card Test 2: Smithy
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:
        1:   10:int assertEqual(int result, int expected){
        1:   11:  if(result == expected){
        1:   12:    printf("Test PASS\n");
        1:   13:    return 0;
        -:   14:    }else{
    #####:   15:    printf("Test FAIL\n result: %i, expected: %i\n", result, expected);
    #####:   16:    return 1;
        -:   17:    }
        -:   18:}
        -:   19:
        -:   20:int smithyRefactored(struct gameState *state,int);
        -:   21:
        -:   22:
        1:   23:int main () {
        -:   24:
        -:   25:  int r;
        -:   26:
        1:   27:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   28:               remodel, smithy, village, baron, great_hall};
        -:   29:
        -:   30:  struct gameState G;
        -:   31:
        1:   32:  r = initializeGame(2, k, 1, &G);
        -:   33:
        1:   34:  assert(r == 0);
        -:   35:
        1:   36:     int currentPlayer = whoseTurn(&G);
        1:   37:     int nextPlayer = currentPlayer + 1;
        1:   38:     int handPos = 2;
        -:   39:  
        1:   40:     if (nextPlayer > (G.numPlayers - 1)){
    #####:   41:    	nextPlayer = 0;
        -:   42:     }
        -:   43:
        -:   44:     //+3 Cards
        1:   45:     int preHandCount = G.handCount[currentPlayer];
        1:   46:     printf("Testing Smithy\n");
        1:   47:     printf("Pre-Hand count = %d\n", preHandCount);
        -:   48:     
        1:   49:    smithyRefactored(&G,handPos);
        -:   50:
        1:   51:     int postHandCount = G.handCount[currentPlayer];
        1:   52:     printf("Post-hand count = %d\n", postHandCount);
        1:   53:     if((assertEqual(postHandCount, preHandCount + 3)) == 0){
        1:   54:        printf("Smithy correctly adds 3 cards to currentPlayer's hand\n");
        -:   55:     }else
    #####:   56:        printf("Smithy fails to add 3 cards to currentPlayer's hand\n");
        -:   57:     
        1:   58:     return 0;
        -:   59:     }
