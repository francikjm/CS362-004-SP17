Pre-hand count = 335
Post-hand count = 334
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 335
Post-discard count = 334
Test PASS
Re-check post hand count = 334
Pre-hand count = 27
Post-hand count = 28
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 27
Post-discard count = 28
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 28
Pre-hand count = 426
Post-hand count = 425
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 426
Post-discard count = 425
Test PASS
Re-check post hand count = 425
Pre-hand count = 429
Post-hand count = 428
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 429
Post-discard count = 428
Test PASS
Re-check post hand count = 428
Pre-hand count = 135
Post-hand count = 132
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 135
Post-discard count = 132
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 132
Pre-hand count = 167
Post-hand count = 168
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 167
Post-discard count = 168
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 168
Pre-hand count = 373
Post-hand count = 372
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 373
Post-discard count = 372
Test PASS
Re-check post hand count = 372
Pre-hand count = 324
Post-hand count = 321
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 324
Post-discard count = 321
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 321
Pre-hand count = 480
Post-hand count = 481
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 480
Post-discard count = 481
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 481
Pre-hand count = 281
Post-hand count = 282
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 281
Post-discard count = 282
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 282
Pre-hand count = 5
Post-hand count = 6
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 5
Post-discard count = 6
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 6
Pre-hand count = 395
Post-hand count = 396
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 395
Post-discard count = 396
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 396
Pre-hand count = 364
Post-hand count = 365
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 364
Post-discard count = 365
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 365
Pre-hand count = 178
Post-hand count = 175
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 178
Post-discard count = 175
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 175
Pre-hand count = 399
Post-hand count = 400
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 399
Post-discard count = 400
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 400
Pre-hand count = 12
Post-hand count = 13
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 12
Post-discard count = 13
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 13
Pre-hand count = 70
Post-hand count = 71
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 70
Post-discard count = 71
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 71
Pre-hand count = 402
Post-hand count = 401
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 402
Post-discard count = 401
Test PASS
Re-check post hand count = 401
Pre-hand count = 280
Post-hand count = 281
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 280
Post-discard count = 281
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 281
Pre-hand count = 119
Post-hand count = 118
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 119
Post-discard count = 118
Test PASS
Re-check post hand count = 118
Pre-hand count = 271
Post-hand count = 272
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 271
Post-discard count = 272
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 272
Pre-hand count = 356
Post-hand count = 353
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 356
Post-discard count = 353
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 353
Pre-hand count = 183
Post-hand count = 184
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 183
Post-discard count = 184
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 184
Pre-hand count = 329
Post-hand count = 326
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 329
Post-discard count = 326
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 326
Pre-hand count = 215
Post-hand count = 212
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 215
Post-discard count = 212
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 212
Pre-hand count = 245
Post-hand count = 246
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 245
Post-discard count = 246
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 246
Pre-hand count = 488
Post-hand count = 489
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 488
Post-discard count = 489
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 489
Pre-hand count = 0
Post-hand count = -3
Pre-coin count = 4
Post-coin count = -1
Pre-discard count = 0
Post-discard count = -3
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = -3
Pre-hand count = 356
Post-hand count = 355
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 356
Post-discard count = 355
Test PASS
Re-check post hand count = 355
Pre-hand count = 436
Post-hand count = 437
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 436
Post-discard count = 437
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 437
Pre-hand count = 407
Post-hand count = 404
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 407
Post-discard count = 404
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 404
Pre-hand count = 237
Post-hand count = 236
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 237
Post-discard count = 236
Test PASS
Re-check post hand count = 236
Pre-hand count = 11
Post-hand count = 10
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 11
Post-discard count = 10
Test PASS
Re-check post hand count = 10
Pre-hand count = 263
Post-hand count = 264
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 263
Post-discard count = 264
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 264
Pre-hand count = 318
Post-hand count = 315
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 318
Post-discard count = 315
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 315
Pre-hand count = 496
Post-hand count = 497
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 496
Post-discard count = 497
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 497
Pre-hand count = 499
Post-hand count = 500
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 499
Post-discard count = 500
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 500
Pre-hand count = 139
Post-hand count = 136
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 139
Post-discard count = 136
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 136
Pre-hand count = 464
Post-hand count = 463
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 464
Post-discard count = 463
Test PASS
Re-check post hand count = 463
Pre-hand count = 111
Post-hand count = 112
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 111
Post-discard count = 112
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 112
Pre-hand count = 68
Post-hand count = 69
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 68
Post-discard count = 69
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 69
Pre-hand count = 301
Post-hand count = 300
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 301
Post-discard count = 300
Test PASS
Re-check post hand count = 300
Pre-hand count = 236
Post-hand count = 237
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 236
Post-discard count = 237
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 237
Pre-hand count = 416
Post-hand count = 417
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 416
Post-discard count = 417
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 417
Pre-hand count = 124
Post-hand count = 121
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 124
Post-discard count = 121
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 121
Pre-hand count = 50
Post-hand count = 51
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 50
Post-discard count = 51
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 51
Pre-hand count = 430
Post-hand count = 427
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 430
Post-discard count = 427
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 427
Pre-hand count = 481
Post-hand count = 478
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 481
Post-discard count = 478
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 478
Pre-hand count = 168
Post-hand count = 167
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 168
Post-discard count = 167
Test PASS
Re-check post hand count = 167
Pre-hand count = 340
Post-hand count = 339
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 340
Post-discard count = 339
Test PASS
Re-check post hand count = 339
Pre-hand count = 107
Post-hand count = 104
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 107
Post-discard count = 104
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 104
Pre-hand count = 412
Post-hand count = 413
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 412
Post-discard count = 413
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 413
Pre-hand count = 210
Post-hand count = 209
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 210
Post-discard count = 209
Test PASS
Re-check post hand count = 209
Pre-hand count = 372
Post-hand count = 369
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 372
Post-discard count = 369
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 369
Pre-hand count = 404
Post-hand count = 403
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 404
Post-discard count = 403
Test PASS
Re-check post hand count = 403
Pre-hand count = 228
Post-hand count = 227
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 228
Post-discard count = 227
Test PASS
Re-check post hand count = 227
Pre-hand count = 224
Post-hand count = 221
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 224
Post-discard count = 221
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 221
Pre-hand count = 84
Post-hand count = 81
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 84
Post-discard count = 81
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 81
Pre-hand count = 385
Post-hand count = 386
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 385
Post-discard count = 386
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 386
Pre-hand count = 213
Post-hand count = 212
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 213
Post-discard count = 212
Test PASS
Re-check post hand count = 212
Pre-hand count = 81
Post-hand count = 78
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 81
Post-discard count = 78
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 78
Pre-hand count = 4
Post-hand count = 3
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 4
Post-discard count = 3
Test PASS
Re-check post hand count = 3
Pre-hand count = 255
Post-hand count = 252
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 255
Post-discard count = 252
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 252
Pre-hand count = 205
Post-hand count = 204
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 205
Post-discard count = 204
Test PASS
Re-check post hand count = 204
Pre-hand count = 254
Post-hand count = 253
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 254
Post-discard count = 253
Test PASS
Re-check post hand count = 253
Pre-hand count = 6
Post-hand count = 7
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 6
Post-discard count = 7
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 7
Pre-hand count = 189
Post-hand count = 188
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 189
Post-discard count = 188
Test PASS
Re-check post hand count = 188
Pre-hand count = 308
Post-hand count = 309
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 308
Post-discard count = 309
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 309
Pre-hand count = 148
Post-hand count = 145
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 148
Post-discard count = 145
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 145
Pre-hand count = 29
Post-hand count = 30
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 29
Post-discard count = 30
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 30
Pre-hand count = 490
Post-hand count = 491
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 490
Post-discard count = 491
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 491
Pre-hand count = 392
Post-hand count = 391
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 392
Post-discard count = 391
Test PASS
Re-check post hand count = 391
Pre-hand count = 188
Post-hand count = 189
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 188
Post-discard count = 189
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 189
Pre-hand count = 421
Post-hand count = 422
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 421
Post-discard count = 422
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 422
Pre-hand count = 248
Post-hand count = 245
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 248
Post-discard count = 245
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 245
Pre-hand count = 43
Post-hand count = 40
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 43
Post-discard count = 40
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 40
Pre-hand count = 181
Post-hand count = 178
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 181
Post-discard count = 178
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 178
Pre-hand count = 134
Post-hand count = 135
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 134
Post-discard count = 135
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 135
Pre-hand count = 129
Post-hand count = 126
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 129
Post-discard count = 126
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 126
Pre-hand count = 335
Post-hand count = 336
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 335
Post-discard count = 336
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 336
Pre-hand count = 289
Post-hand count = 288
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 289
Post-discard count = 288
Test PASS
Re-check post hand count = 288
Pre-hand count = 144
Post-hand count = 143
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 144
Post-discard count = 143
Test PASS
Re-check post hand count = 143
Pre-hand count = 69
Post-hand count = 68
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 69
Post-discard count = 68
Test PASS
Re-check post hand count = 68
Pre-hand count = 117
Post-hand count = 114
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 117
Post-discard count = 114
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 114
Pre-hand count = 425
Post-hand count = 422
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 425
Post-discard count = 422
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 422
Pre-hand count = 126
Post-hand count = 127
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 126
Post-discard count = 127
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 127
Pre-hand count = 358
Post-hand count = 355
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 358
Post-discard count = 355
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 355
Pre-hand count = 494
Post-hand count = 493
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 494
Post-discard count = 493
Test PASS
Re-check post hand count = 493
Pre-hand count = 290
Post-hand count = 287
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 290
Post-discard count = 287
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 287
Pre-hand count = 93
Post-hand count = 92
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 93
Post-discard count = 92
Test PASS
Re-check post hand count = 92
Pre-hand count = 355
Post-hand count = 354
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 355
Post-discard count = 354
Test PASS
Re-check post hand count = 354
Pre-hand count = 469
Post-hand count = 466
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 469
Post-discard count = 466
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 466
Pre-hand count = 433
Post-hand count = 430
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 433
Post-discard count = 430
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 430
Pre-hand count = 284
Post-hand count = 283
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 284
Post-discard count = 283
Test PASS
Re-check post hand count = 283
Pre-hand count = 237
Post-hand count = 238
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 237
Post-discard count = 238
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 238
Pre-hand count = 283
Post-hand count = 282
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 283
Post-discard count = 282
Test PASS
Re-check post hand count = 282
Pre-hand count = 483
Post-hand count = 480
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 483
Post-discard count = 480
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 480
Pre-hand count = 229
Post-hand count = 230
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 229
Post-discard count = 230
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 230
Pre-hand count = 388
Post-hand count = 387
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 388
Post-discard count = 387
Test PASS
Re-check post hand count = 387
Pre-hand count = 358
Post-hand count = 355
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 358
Post-discard count = 355
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 355
Tests Complete
Pre-hand count = 335
Post-hand count = 334
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 335
Post-discard count = 334
Test PASS
Re-check post hand count = 334
Pre-hand count = 27
Post-hand count = 28
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 27
Post-discard count = 28
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 28
Pre-hand count = 426
Post-hand count = 425
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 426
Post-discard count = 425
Test PASS
Re-check post hand count = 425
Pre-hand count = 429
Post-hand count = 428
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 429
Post-discard count = 428
Test PASS
Re-check post hand count = 428
Pre-hand count = 135
Post-hand count = 132
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 135
Post-discard count = 132
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 132
Pre-hand count = 167
Post-hand count = 168
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 167
Post-discard count = 168
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 168
Pre-hand count = 373
Post-hand count = 372
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 373
Post-discard count = 372
Test PASS
Re-check post hand count = 372
Pre-hand count = 324
Post-hand count = 321
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 324
Post-discard count = 321
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 321
Pre-hand count = 480
Post-hand count = 481
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 480
Post-discard count = 481
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 481
Pre-hand count = 281
Post-hand count = 282
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 281
Post-discard count = 282
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 282
Pre-hand count = 5
Post-hand count = 6
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 5
Post-discard count = 6
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 6
Pre-hand count = 395
Post-hand count = 396
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 395
Post-discard count = 396
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 396
Pre-hand count = 364
Post-hand count = 365
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 364
Post-discard count = 365
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 365
Pre-hand count = 178
Post-hand count = 175
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 178
Post-discard count = 175
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 175
Pre-hand count = 399
Post-hand count = 400
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 399
Post-discard count = 400
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 400
Pre-hand count = 12
Post-hand count = 13
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 12
Post-discard count = 13
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 13
Pre-hand count = 70
Post-hand count = 71
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 70
Post-discard count = 71
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 71
Pre-hand count = 402
Post-hand count = 401
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 402
Post-discard count = 401
Test PASS
Re-check post hand count = 401
Pre-hand count = 280
Post-hand count = 281
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 280
Post-discard count = 281
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 281
Pre-hand count = 119
Post-hand count = 118
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 119
Post-discard count = 118
Test PASS
Re-check post hand count = 118
Pre-hand count = 271
Post-hand count = 272
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 271
Post-discard count = 272
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 272
Pre-hand count = 356
Post-hand count = 353
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 356
Post-discard count = 353
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 353
Pre-hand count = 183
Post-hand count = 184
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 183
Post-discard count = 184
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 184
Pre-hand count = 329
Post-hand count = 326
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 329
Post-discard count = 326
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 326
Pre-hand count = 215
Post-hand count = 212
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 215
Post-discard count = 212
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 212
Pre-hand count = 245
Post-hand count = 246
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 245
Post-discard count = 246
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 246
Pre-hand count = 488
Post-hand count = 489
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 488
Post-discard count = 489
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 489
Pre-hand count = 0
Post-hand count = -3
Pre-coin count = 4
Post-coin count = -1
Pre-discard count = 0
Post-discard count = -3
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = -3
Pre-hand count = 356
Post-hand count = 355
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 356
Post-discard count = 355
Test PASS
Re-check post hand count = 355
Pre-hand count = 436
Post-hand count = 437
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 436
Post-discard count = 437
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 437
Pre-hand count = 407
Post-hand count = 404
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 407
Post-discard count = 404
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 404
Pre-hand count = 237
Post-hand count = 236
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 237
Post-discard count = 236
Test PASS
Re-check post hand count = 236
Pre-hand count = 11
Post-hand count = 10
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 11
Post-discard count = 10
Test PASS
Re-check post hand count = 10
Pre-hand count = 263
Post-hand count = 264
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 263
Post-discard count = 264
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 264
Pre-hand count = 318
Post-hand count = 315
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 318
Post-discard count = 315
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 315
Pre-hand count = 496
Post-hand count = 497
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 496
Post-discard count = 497
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 497
Pre-hand count = 499
Post-hand count = 500
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 499
Post-discard count = 500
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 500
Pre-hand count = 139
Post-hand count = 136
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 139
Post-discard count = 136
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 136
Pre-hand count = 464
Post-hand count = 463
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 464
Post-discard count = 463
Test PASS
Re-check post hand count = 463
Pre-hand count = 111
Post-hand count = 112
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 111
Post-discard count = 112
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 112
Pre-hand count = 68
Post-hand count = 69
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 68
Post-discard count = 69
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 69
Pre-hand count = 301
Post-hand count = 300
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 301
Post-discard count = 300
Test PASS
Re-check post hand count = 300
Pre-hand count = 236
Post-hand count = 237
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 236
Post-discard count = 237
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 237
Pre-hand count = 416
Post-hand count = 417
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 416
Post-discard count = 417
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 417
Pre-hand count = 124
Post-hand count = 121
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 124
Post-discard count = 121
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 121
Pre-hand count = 50
Post-hand count = 51
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 50
Post-discard count = 51
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 51
Pre-hand count = 430
Post-hand count = 427
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 430
Post-discard count = 427
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 427
Pre-hand count = 481
Post-hand count = 478
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 481
Post-discard count = 478
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 478
Pre-hand count = 168
Post-hand count = 167
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 168
Post-discard count = 167
Test PASS
Re-check post hand count = 167
Pre-hand count = 340
Post-hand count = 339
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 340
Post-discard count = 339
Test PASS
Re-check post hand count = 339
Pre-hand count = 107
Post-hand count = 104
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 107
Post-discard count = 104
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 104
Pre-hand count = 412
Post-hand count = 413
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 412
Post-discard count = 413
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 413
Pre-hand count = 210
Post-hand count = 209
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 210
Post-discard count = 209
Test PASS
Re-check post hand count = 209
Pre-hand count = 372
Post-hand count = 369
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 372
Post-discard count = 369
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 369
Pre-hand count = 404
Post-hand count = 403
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 404
Post-discard count = 403
Test PASS
Re-check post hand count = 403
Pre-hand count = 228
Post-hand count = 227
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 228
Post-discard count = 227
Test PASS
Re-check post hand count = 227
Pre-hand count = 224
Post-hand count = 221
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 224
Post-discard count = 221
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 221
Pre-hand count = 84
Post-hand count = 81
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 84
Post-discard count = 81
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 81
Pre-hand count = 385
Post-hand count = 386
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 385
Post-discard count = 386
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 386
Pre-hand count = 213
Post-hand count = 212
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 213
Post-discard count = 212
Test PASS
Re-check post hand count = 212
Pre-hand count = 81
Post-hand count = 78
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 81
Post-discard count = 78
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 78
Pre-hand count = 4
Post-hand count = 3
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 4
Post-discard count = 3
Test PASS
Re-check post hand count = 3
Pre-hand count = 255
Post-hand count = 252
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 255
Post-discard count = 252
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 252
Pre-hand count = 205
Post-hand count = 204
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 205
Post-discard count = 204
Test PASS
Re-check post hand count = 204
Pre-hand count = 254
Post-hand count = 253
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 254
Post-discard count = 253
Test PASS
Re-check post hand count = 253
Pre-hand count = 6
Post-hand count = 7
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 6
Post-discard count = 7
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 7
Pre-hand count = 189
Post-hand count = 188
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 189
Post-discard count = 188
Test PASS
Re-check post hand count = 188
Pre-hand count = 308
Post-hand count = 309
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 308
Post-discard count = 309
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 309
Pre-hand count = 148
Post-hand count = 145
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 148
Post-discard count = 145
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 145
Pre-hand count = 29
Post-hand count = 30
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 29
Post-discard count = 30
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 30
Pre-hand count = 490
Post-hand count = 491
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 490
Post-discard count = 491
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 491
Pre-hand count = 392
Post-hand count = 391
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 392
Post-discard count = 391
Test PASS
Re-check post hand count = 391
Pre-hand count = 188
Post-hand count = 189
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 188
Post-discard count = 189
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 189
Pre-hand count = 421
Post-hand count = 422
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 421
Post-discard count = 422
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 422
Pre-hand count = 248
Post-hand count = 245
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 248
Post-discard count = 245
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 245
Pre-hand count = 43
Post-hand count = 40
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 43
Post-discard count = 40
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 40
Pre-hand count = 181
Post-hand count = 178
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 181
Post-discard count = 178
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 178
Pre-hand count = 134
Post-hand count = 135
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 134
Post-discard count = 135
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 135
Pre-hand count = 129
Post-hand count = 126
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 129
Post-discard count = 126
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 126
Pre-hand count = 335
Post-hand count = 336
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 335
Post-discard count = 336
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 336
Pre-hand count = 289
Post-hand count = 288
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 289
Post-discard count = 288
Test PASS
Re-check post hand count = 288
Pre-hand count = 144
Post-hand count = 143
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 144
Post-discard count = 143
Test PASS
Re-check post hand count = 143
Pre-hand count = 69
Post-hand count = 68
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 69
Post-discard count = 68
Test PASS
Re-check post hand count = 68
Pre-hand count = 117
Post-hand count = 114
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 117
Post-discard count = 114
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 114
Pre-hand count = 425
Post-hand count = 422
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 425
Post-discard count = 422
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 422
Pre-hand count = 126
Post-hand count = 127
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 126
Post-discard count = 127
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 127
Pre-hand count = 358
Post-hand count = 355
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 358
Post-discard count = 355
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 355
Pre-hand count = 494
Post-hand count = 493
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 494
Post-discard count = 493
Test PASS
Re-check post hand count = 493
Pre-hand count = 290
Post-hand count = 287
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 290
Post-discard count = 287
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 287
Pre-hand count = 93
Post-hand count = 92
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 93
Post-discard count = 92
Test PASS
Re-check post hand count = 92
Pre-hand count = 355
Post-hand count = 354
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 355
Post-discard count = 354
Test PASS
Re-check post hand count = 354
Pre-hand count = 469
Post-hand count = 466
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 469
Post-discard count = 466
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 466
Pre-hand count = 433
Post-hand count = 430
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 433
Post-discard count = 430
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 430
Pre-hand count = 284
Post-hand count = 283
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 284
Post-discard count = 283
Test PASS
Re-check post hand count = 283
Pre-hand count = 237
Post-hand count = 238
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 237
Post-discard count = 238
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 238
Pre-hand count = 283
Post-hand count = 282
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 283
Post-discard count = 282
Test PASS
Re-check post hand count = 282
Pre-hand count = 483
Post-hand count = 480
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 483
Post-discard count = 480
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 480
Pre-hand count = 229
Post-hand count = 230
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 229
Post-discard count = 230
TEST FAILED: 2 cards were not added to player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 230
Pre-hand count = 388
Post-hand count = 387
Pre-coin count = 4
Post-coin count = 6
Pre-discard count = 388
Post-discard count = 387
Test PASS
Re-check post hand count = 387
Pre-hand count = 358
Post-hand count = 355
Pre-coin count = 4
Post-coin count = 4
Pre-discard count = 358
Post-discard count = 355
TEST FAILED: 2 cards were not discarded from the player's hand.
Test FAIL
 result: bug!!
Re-check post hand count = 355
Tests Complete
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:8.76% of 194
Branches executed:16.77% of 161
Taken at least once:3.73% of 161
Calls executed:11.11% of 54

Function 'minionRefactored'
Lines executed:0.00% of 25
Branches executed:0.00% of 20
Taken at least once:0.00% of 20
Calls executed:0.00% of 7

Function 'great_hallRefactored'
Lines executed:0.00% of 9
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'council_roomRefactored'
Lines executed:0.00% of 13
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 4

Function 'adventurerRefactored'
Lines executed:0.00% of 22
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 4

Function 'smithyRefactored'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:21.58% of 584
Branches executed:23.65% of 427
Taken at least once:16.16% of 427
Calls executed:12.87% of 101
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 13725 returned 100% blocks executed 83%
    13725:    8:int compare(const void* a, const void* b) {
    13725:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    13725:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     3660:   12:    return -1;
    10065:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 300 returned 100% blocks executed 95%
      300:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      300:   44:  SelectStream(1);
call    0 returned 100%
      300:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      300:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      300:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3300:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    33000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    30000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      300:   73:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   74:    {
       93:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      207:   77:  else if (numPlayers == 3)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -:   78:    {
       99:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      108:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      300:   87:  if (numPlayers == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -:   88:    {
       93:   89:      state->supplyCount[estate] = 8;
       93:   90:      state->supplyCount[duchy] = 8;
       93:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      207:   95:      state->supplyCount[estate] = 12;
      207:   96:      state->supplyCount[duchy] = 12;
      207:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      300:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      300:  102:  state->supplyCount[silver] = 40;
      300:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6300:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    49500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    46500:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     3000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     1200:  115:		  if (numPlayers == 2){ 
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
      186:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      414:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2400:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     3000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    43500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1215:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
      915:  140:      state->deckCount[i] = 0;
     3660:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     2745:  143:	  state->deck[i][j] = estate;
     2745:  144:	  state->deckCount[i]++;
        -:  145:	}
     7320:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     6405:  148:	  state->deck[i][j] = copper;
     6405:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1215:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
      915:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1215:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      915:  166:      state->handCount[i] = 0;
      915:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8400:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     8100:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      300:  182:  state->outpostPlayed = 0;
      300:  183:  state->phase = 0;
      300:  184:  state->numActions = 1;
      300:  185:  state->numBuys = 1;
      300:  186:  state->playedCardCount = 0;
      300:  187:  state->whoseTurn = 0;
      300:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1800:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1500:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      300:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      300:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 915 returned 100% blocks executed 94%
      915:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      915:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      915:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      915:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    10980:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     9150:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     9150:  216:    newDeck[newDeckPos] = state->deck[player][card];
     9150:  217:    newDeckPos++;
    28821:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
    19671:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     9150:  221:    state->deckCount[player]--;
        -:  222:  }
    10065:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     9150:  224:    state->deck[player][i] = newDeck[i];
     9150:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      915:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 600 returned 100% blocks executed 100%
      600:  346:int whoseTurn(struct gameState *state) {
      600:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1722 returned 100% blocks executed 38%
     1722:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1722:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1722:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1722:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1722:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1722:  576:    state->deckCount[player]--;
     1722:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1722:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Refactor five cards Smithy, Adventurer, Council_room, Great_hall, Minion
        -:  647:
        -:  648://Smithy
function smithyRefactored called 0 returned 0% blocks executed 0%
    #####:  649:int smithyRefactored(struct gameState *state, int handPos){
        -:  650: 
        -:  651:  int i;
        -:  652:  //int j;
        -:  653:  //int k;
        -:  654:  //int x;
        -:  655:  //int index;
    #####:  656:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  657:  int nextPlayer = currentPlayer + 1;
        -:  658:
        -:  659:  //int tributeRevealedCards[2] = {-1, -1};
        -:  660:  //int temphand[MAX_HAND];// moved above the if statement
        -:  661:  //int drawntreasure=0;
        -:  662:  //int cardDrawn;
        -:  663:  //int z = 0;// this is the counter for the temp hand
    #####:  664:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  665:    nextPlayer = 0;
        -:  666:  }
        -:  667:
        -:  668:
        -:  669: //+3 Cards  
    #####:  670: for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  671:	{
    #####:  672: drawCard(currentPlayer, state);
call    0 never executed
        -:  673:	}
        -:  674: 
        -:  675: //discard card from hand
    #####:  676: discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  677: return 0;
        -:  678:}
        -:  679:
        -:  680://Adventurer
function adventurerRefactored called 0 returned 0% blocks executed 0%
    #####:  681:int adventurerRefactored(struct gameState *state){
        -:  682:  
        -:  683:     //int i;
        -:  684:     //int j;
        -:  685:     //int k;
        -:  686:     //int x;
        -:  687:     //int index;
    #####:  688:     int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  689:     int nextPlayer = currentPlayer + 1;
        -:  690:
        -:  691:     //int tributeRevealedCards[2] = {-1, -1};
        -:  692:     int temphand[MAX_HAND];// moved above the if statement
    #####:  693:     int drawntreasure=0;
        -:  694:     int cardDrawn;
    #####:  695:     int z = 0;// this is the counter for the temp hand
    #####:  696:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  697:    nextPlayer = 0;
        -:  698:  }
        -:  699:
        -:  700:
    #####:  701:     while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  702:         if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  703:             shuffle(currentPlayer, state);
call    0 never executed
        -:  704:         }
    #####:  705:     drawCard(currentPlayer, state);
call    0 never executed
    #####:  706:     cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  707:     if (cardDrawn != copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  708:     drawntreasure++;
        -:  709:     //for debugging
    #####:  710:     printf("Drawntreasure = %d\n", drawntreasure);}
call    0 never executed
        -:  711:     else{
    #####:  712:     temphand[z]=cardDrawn;
    #####:  713:     state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  714:     z++;
        -:  715:     }
        -:  716:     }
    #####:  717:     while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  718:     state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  719:     z=z-1;
        -:  720:     }
    #####:  721:     return 0;
        -:  722:}
        -:  723:
        -:  724://Council_room
function council_roomRefactored called 0 returned 0% blocks executed 0%
    #####:  725:int council_roomRefactored(struct gameState *state, int handPos){
        -:  726:    
        -:  727:     int i;
        -:  728:  //int j;
        -:  729:  //int k;
        -:  730:  //int x;
        -:  731:  //int index;
    #####:  732:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
        -:  735:  //int tributeRevealedCards[2] = {-1, -1};
        -:  736:  //int temphand[MAX_HAND];// moved above the if statement
        -:  737:  //int drawntreasure=0;
        -:  738:  //int cardDrawn;
        -:  739:  //int z = 0;// this is the counter for the temp hand
    #####:  740:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  741:    nextPlayer = 0;
        -:  742:  }
        -:  743:
        -:  744:
        -:  745:     //+4 Cards
    #####:  746:     for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  747:     {
    #####:  748:     drawCard(currentPlayer, state);
call    0 never executed
        -:  749:     }
        -:  750:     
        -:  751:     //+1 Buy
    #####:  752:     state->numBuys + 2;
        -:  753:     
        -:  754:     //Each other player draws a card
    #####:  755:     for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  756:     {
    #####:  757:     if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  758:	    {
    #####:  759:     drawCard(i, state);
call    0 never executed
        -:  760:	    }
        -:  761:     }
        -:  762:     
        -:  763:     //put played card in played card pile
    #####:  764:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  765:     
    #####:  766:     return 0;
        -:  767:}
        -:  768:
        -:  769://Great_hall
function great_hallRefactored called 0 returned 0% blocks executed 0%
    #####:  770:int great_hallRefactored(struct gameState *state, int handPos){
        -:  771:    
        -:  772:     //int i;
        -:  773:  //int j;
        -:  774:  //int k;
        -:  775:  //int x;
        -:  776:  //int index;
    #####:  777:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  778:  int nextPlayer = currentPlayer + 1;
        -:  779:
        -:  780:  //int tributeRevealedCards[2] = {-1, -1};
        -:  781:  //int temphand[MAX_HAND];// moved above the if statement
        -:  782:  //int drawntreasure=0;
        -:  783:  //int cardDrawn;
        -:  784:  //int z = 0;// this is the counter for the temp hand
    #####:  785:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  786:    nextPlayer = 0;
        -:  787:  }
        -:  788:
        -:  789:
        -:  790:     //+1 Card
    #####:  791:     drawCard(currentPlayer, state);
call    0 never executed
        -:  792:     
        -:  793:     //+1 Actions
    #####:  794:     state->numActions++;
        -:  795:     
        -:  796:     //discard card from hand
    #####:  797:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  798:     return 0;
        -:  799:}
        -:  800:
        -:  801://Minion
function minionRefactored called 0 returned 0% blocks executed 0%
    #####:  802:int minionRefactored(struct gameState *state, int choice1, int choice2, int handPos){
        -:  803:    
        -:  804:int i;
        -:  805:  int j;
        -:  806:  int k;
        -:  807:  int x;
        -:  808:  int index;
    #####:  809:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  810:  int nextPlayer = currentPlayer + 1;
        -:  811:
    #####:  812:  int tributeRevealedCards[2] = {-1, -1};
        -:  813:  int temphand[MAX_HAND];// moved above the if statement
    #####:  814:  int drawntreasure=0;
        -:  815:  int cardDrawn;
    #####:  816:  int z = 0;// this is the counter for the temp hand
    #####:  817:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  818:    nextPlayer = 0;
        -:  819:  }
        -:  820:
        -:  821:      //+1 action
    #####:  822:     state->numActions++;
        -:  823:     
        -:  824:     //discard card from hand
    #####:  825:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  826:     
    #####:  827:     if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  828:     {
    #####:  829:     state->coins = state->coins + 2;
        -:  830:     }
        -:  831:     
    #####:  832:     else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  833:     {
        -:  834:     //discard hand
    #####:  835:     while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  836:	    {
    #####:  837:     discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  838:	    }
        -:  839:     
        -:  840:     //draw 4
    #####:  841:     for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  842:	    {
    #####:  843:     drawCard(currentPlayer, state);
call    0 never executed
        -:  844:	    }
        -:  845:     
        -:  846:     //other players discard hand and redraw if hand size > 4
    #####:  847:     for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  848:	    {
    #####:  849:     if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  850:     {
    #####:  851:     if ( state->handCount[i] > 3 )
branch  0 never executed
branch  1 never executed
        -:  852:     {
        -:  853:     //discard hand
    #####:  854:     while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  855:     {
    #####:  856:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  857:     }
        -:  858:     
        -:  859:     //draw 4
    #####:  860:     for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  861:     {
    #####:  862:			  drawCard(i, state);
call    0 never executed
        -:  863:     }
        -:  864:     }
        -:  865:     }
        -:  866:	    }
        -:  867:     
        -:  868:     }
    #####:  869:     return 0;
        -:  870:
        -:  871:}
        -:  872:
        -:  873:
        -:  874:
function cardEffect called 300 returned 100% blocks executed 7%
      300:  875:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  876:{
        -:  877:  int i;
        -:  878:  int j;
        -:  879:  int k;
        -:  880:  int x;
        -:  881:  int index;
      300:  882:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      300:  883:  int nextPlayer = currentPlayer + 1;
        -:  884:
      300:  885:  int tributeRevealedCards[2] = {-1, -1};
        -:  886:  int temphand[MAX_HAND];// moved above the if statement
      300:  887:  int drawntreasure=0;
        -:  888:  int cardDrawn;
      300:  889:  int z = 0;// this is the counter for the temp hand
      300:  890:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  891:    nextPlayer = 0;
        -:  892:  }
        -:  893:  
        -:  894:	
        -:  895:  //uses switch to select card and perform actions
      300:  896:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 100%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  897:    {
        -:  898:    case adventurer:
    #####:  899:            adventurerRefactored(state);
call    0 never executed
        -:  900:            
        -:  901:    case council_room:
    #####:  902:            council_roomRefactored(state, handPos);
call    0 never executed
        -:  903:     			
        -:  904:    case feast:
        -:  905:      //gain card with cost up to 5
        -:  906:      //Backup hand
    #####:  907:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  908:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  909:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  910:      }
        -:  911:      //Backup hand
        -:  912:
        -:  913:      //Update Coins for Buy
    #####:  914:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  915:      x = 1;//Condition to loop on
    #####:  916:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  917:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  918:	  if (DEBUG)
        -:  919:	    printf("None of that card left, sorry!\n");
        -:  920:
        -:  921:	  if (DEBUG){
        -:  922:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  923:	  }
        -:  924:	}
    #####:  925:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  930:	  }
        -:  931:	}
        -:  932:	else{
        -:  933:
        -:  934:	  if (DEBUG){
        -:  935:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  936:	  }
        -:  937:
    #####:  938:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  939:	  x = 0;//No more buying cards
        -:  940:
        -:  941:	  if (DEBUG){
        -:  942:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  943:	  }
        -:  944:
        -:  945:	}
        -:  946:      }     
        -:  947:
        -:  948:      //Reset Hand
    #####:  949:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  950:	state->hand[currentPlayer][i] = temphand[i];
    #####:  951:	temphand[i] = -1;
        -:  952:      }
        -:  953:      //Reset Hand
        -:  954:      			
    #####:  955:      return 0;
        -:  956:			
        -:  957:    case gardens:
    #####:  958:      return -1;
        -:  959:			
        -:  960:    case mine:
    #####:  961:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  962:
    #####:  963:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:	{
    #####:  965:	  return -1;
        -:  966:	}
        -:  967:		
    #####:  968:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:	{
    #####:  970:	  return -1;
        -:  971:	}
        -:  972:
    #####:  973:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:      //discard trashed card
    #####:  984:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  989:	      break;
        -:  990:	    }
        -:  991:	}
        -:  992:			
    #####:  993:      return 0;
        -:  994:			
        -:  995:    case remodel:
    #####:  996:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  997:
    #####:  998:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:	{
    #####: 1000:	  return -1;
        -: 1001:	}
        -: 1002:
    #####: 1003:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:      //discard card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:      //discard trashed card
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
    #####: 1011:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1014:	      break;
        -: 1015:	    }
        -: 1016:	}
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case smithy:
    #####: 1021:      smithyRefactored(state, handPos);
call    0 never executed
        -: 1022:     		
        -: 1023:    case village:
        -: 1024:      //+1 Card
    #####: 1025:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1026:			
        -: 1027:      //+2 Actions
    #####: 1028:      state->numActions = state->numActions + 2;
        -: 1029:			
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case baron:
    #####: 1035:      state->numBuys++;//Increase buys by 1!
    #####: 1036:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1037:	int p = 0;//Iterator for hand!
    #####: 1038:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1039:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1042:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1043:	    state->discardCount[currentPlayer]++;
    #####: 1044:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1046:	    }
    #####: 1047:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1048:	    state->handCount[currentPlayer]--;
    #####: 1049:	    card_not_discarded = 0;//Exit the loop
        -: 1050:	  }
    #####: 1051:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1052:	    if(DEBUG) {
        -: 1053:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1054:	      printf("Must gain an estate if there are any\n");
        -: 1055:	    }
    #####: 1056:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1057:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1058:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1059:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1060:		isGameOver(state);
call    0 never executed
        -: 1061:	      }
        -: 1062:	    }
    #####: 1063:	    card_not_discarded = 0;//Exit the loop
        -: 1064:	  }
        -: 1065:			    
        -: 1066:	  else{
    #####: 1067:	    p++;//Next card
        -: 1068:	  }
        -: 1069:	}
        -: 1070:      }
        -: 1071:			    
        -: 1072:      else{
    #####: 1073:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1074:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1075:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1076:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1077:	    isGameOver(state);
call    0 never executed
        -: 1078:	  }
        -: 1079:	}
        -: 1080:      }
        -: 1081:	    
        -: 1082:      
    #####: 1083:      return 0;
        -: 1084:		
        -: 1085:    case great_hall:
    #####: 1086:      great_hallRefactored(state, handPos);
call    0 never executed
        -: 1087:     		
        -: 1088:    case minion:
    #####: 1089:            minionRefactored(state, choice1, choice2, handPos);
call    0 never executed
        -: 1090:		
        -: 1091:    case steward:
      300: 1092:      if (choice1 == 1)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 1093:	{
        -: 1094:	  //+2 cards
      111: 1095:	  drawCard(currentPlayer, state);
call    0 returned 100%
      111: 1096:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1097:	}
      189: 1098:      else if (choice1 == 2)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -: 1099:	{
        -: 1100:	  //+2 coins
       93: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:      else
        -: 1104:	{
        -: 1105:	  //trash 2 cards in hand
       96: 1106:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
       96: 1107:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1108:	}
        -: 1109:			
        -: 1110:      //discard card from hand
      300: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      300: 1112:      return 0;
        -: 1113:		
        -: 1114:    case tribute:
    #####: 1115:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1116:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1117:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	  state->deckCount[nextPlayer]--;
        -: 1119:	}
    #####: 1120:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1121:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1122:	  state->discardCount[nextPlayer]--;
        -: 1123:	}
        -: 1124:	else{
        -: 1125:	  //No Card to Reveal
        -: 1126:	  if (DEBUG){
        -: 1127:	    printf("No cards to reveal\n");
        -: 1128:	  }
        -: 1129:	}
        -: 1130:      }
        -: 1131:	    
        -: 1132:      else{
    #####: 1133:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:	    state->deckCount[nextPlayer]++;
    #####: 1137:	    state->discard[nextPlayer][i] = -1;
    #####: 1138:	    state->discardCount[nextPlayer]--;
        -: 1139:	  }
        -: 1140:			    
    #####: 1141:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1142:	} 
    #####: 1143:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:	state->deckCount[nextPlayer]--;
    #####: 1146:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1147:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:	state->deckCount[nextPlayer]--;
        -: 1149:      }    
        -: 1150:		       
    #####: 1151:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1152:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:	state->playedCardCount++;
    #####: 1154:	tributeRevealedCards[1] = -1;
        -: 1155:      }
        -: 1156:
    #####: 1157:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1158:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1159:	  state->coins += 2;
        -: 1160:	}
        -: 1161:		    
    #####: 1162:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1163:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1164:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1165:	}
        -: 1166:	else{//Action Card
    #####: 1167:	  state->numActions = state->numActions + 2;
        -: 1168:	}
        -: 1169:      }
        -: 1170:	    
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case ambassador:
    #####: 1174:      j = 0;		//used to check if player has enough cards to discard
        -: 1175:
    #####: 1176:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1177:	{
    #####: 1178:	  return -1;				
        -: 1179:	}
        -: 1180:
    #####: 1181:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:
    #####: 1186:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1189:	    {
    #####: 1190:	      j++;
        -: 1191:	    }
        -: 1192:	}
    #####: 1193:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1194:	{
    #####: 1195:	  return -1;				
        -: 1196:	}
        -: 1197:
        -: 1198:      if (DEBUG) 
        -: 1199:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1200:
        -: 1201:      //increase supply count for choosen card by amount being discarded
    #####: 1202:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1203:			
        -: 1204:      //each other player gains a copy of revealed card
    #####: 1205:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1208:	    {
    #####: 1209:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1210:	    }
        -: 1211:	}
        -: 1212:
        -: 1213:      //discard played card from hand
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1215:
        -: 1216:      //trash copies of cards returned to supply
    #####: 1217:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	    {
    #####: 1221:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1222:		{
    #####: 1223:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1224:		  break;
        -: 1225:		}
        -: 1226:	    }
        -: 1227:	}			
        -: 1228:
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case cutpurse:
        -: 1232:
    #####: 1233:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1234:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1237:	    {
    #####: 1238:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1239:		{
    #####: 1240:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1241:		    {
    #####: 1242:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1243:		      break;
        -: 1244:		    }
    #####: 1245:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1246:		    {
    #####: 1247:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1248:			{
        -: 1249:			  if (DEBUG)
        -: 1250:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1251:			}	
    #####: 1252:		      break;
        -: 1253:		    }		
        -: 1254:		}
        -: 1255:					
        -: 1256:	    }
        -: 1257:				
        -: 1258:	}				
        -: 1259:
        -: 1260:      //discard played card from hand
    #####: 1261:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1262:
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:		
        -: 1266:    case embargo: 
        -: 1267:      //+2 Coins
    #####: 1268:      state->coins = state->coins + 2;
        -: 1269:			
        -: 1270:      //see if selected pile is in play
    #####: 1271:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1272:	{
    #####: 1273:	  return -1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //add embargo token to selected supply pile
    #####: 1277:      state->embargoTokens[choice1]++;
        -: 1278:			
        -: 1279:      //trash card
    #####: 1280:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case outpost:
        -: 1284:      //set outpost flag
    #####: 1285:      state->outpostPlayed++;
        -: 1286:			
        -: 1287:      //discard card
    #####: 1288:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1289:      return 0;
        -: 1290:		
        -: 1291:    case salvager:
        -: 1292:      //+1 buy
    #####: 1293:      state->numBuys++;
        -: 1294:			
    #####: 1295:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
        -: 1297:	  //gain coins equal to trashed card
    #####: 1298:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1299:	  //trash card
    #####: 1300:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1301:	}
        -: 1302:			
        -: 1303:      //discard card
    #####: 1304:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case sea_hag:
    #####: 1308:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1309:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1310:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1311:	  state->discardCount[i]++;
    #####: 1312:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1313:	}
        -: 1314:      }
    #####: 1315:      return 0;
        -: 1316:		
        -: 1317:    case treasure_map:
        -: 1318:      //search hand for another treasure_map
    #####: 1319:      index = -1;
    #####: 1320:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1321:	{
    #####: 1322:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1323:	    {
    #####: 1324:	      index = i;
    #####: 1325:	      break;
        -: 1326:	    }
        -: 1327:	}
    #####: 1328:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1329:	{
        -: 1330:	  //trash both treasure cards
    #####: 1331:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1332:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1333:
        -: 1334:	  //gain 4 Gold cards
    #####: 1335:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1336:	    {
    #####: 1337:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1338:	    }
        -: 1339:				
        -: 1340:	  //return success
    #####: 1341:	  return 1;
        -: 1342:	}
        -: 1343:			
        -: 1344:      //no second treasure_map found in hand
    #####: 1345:      return -1;
        -: 1346:    }
        -: 1347:	
    #####: 1348:  return -1;
        -: 1349:}
        -: 1350:
function discardCard called 492 returned 100% blocks executed 78%
      492: 1351:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1352:{
        -: 1353:	
        -: 1354:  //if card is not trashed, added to Played pile 
      492: 1355:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1356:    {
        -: 1357:      //add card to played pile
      300: 1358:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      300: 1359:      state->playedCardCount++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //set played card to -1
      492: 1363:  state->hand[currentPlayer][handPos] = -1;
        -: 1364:	
        -: 1365:  //remove card from player's hand
      492: 1366:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1367:    {
        -: 1368:      //reduce number of cards in hand
    #####: 1369:      state->handCount[currentPlayer]--;
        -: 1370:    }
      492: 1371:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1372:    {
        -: 1373:      //reduce number of cards in hand
    #####: 1374:      state->handCount[currentPlayer]--;
        -: 1375:    }
        -: 1376:  else 	
        -: 1377:    {
        -: 1378:      //replace discarded card with last card in hand
      492: 1379:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1380:      //set last card to -1
      492: 1381:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1382:      //reduce number of cards in hand
      492: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:	
      492: 1386:  return 0;
        -: 1387:}
        -: 1388:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1389:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1390:{
        -: 1391:  //Note: supplyPos is enum of choosen card
        -: 1392:	
        -: 1393:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1394:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1395:    {
    #####: 1396:      return -1;
        -: 1397:    }
        -: 1398:	
        -: 1399:  //added card for [whoseTurn] current player:
        -: 1400:  // toFlag = 0 : add to discard
        -: 1401:  // toFlag = 1 : add to deck
        -: 1402:  // toFlag = 2 : add to hand
        -: 1403:
    #####: 1404:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1405:    {
    #####: 1406:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1407:      state->deckCount[player]++;
        -: 1408:    }
    #####: 1409:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1410:    {
    #####: 1411:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1412:      state->handCount[player]++;
        -: 1413:    }
        -: 1414:  else
        -: 1415:    {
    #####: 1416:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1417:      state->discardCount[player]++;
        -: 1418:    }
        -: 1419:	
        -: 1420:  //decrease number in supply pile
    #####: 1421:  state->supplyCount[supplyPos]--;
        -: 1422:	 
    #####: 1423:  return 0;
        -: 1424:}
        -: 1425:
        -: 1426:
function updateCoins called 300 returned 100% blocks executed 82%
      300: 1427:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1428:{
        -: 1429:  int i;
        -: 1430:	
        -: 1431:  //reset coin count
      300: 1432:  state->coins = 0;
        -: 1433:
        -: 1434:  //add coins for each Treasure card in player's hand
     1800: 1435:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1436:    {
     1500: 1437:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1438:	{
     1200: 1439:	  state->coins += 1;
        -: 1440:	}
      300: 1441:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1442:	{
    #####: 1443:	  state->coins += 2;
        -: 1444:	}
      300: 1445:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1446:	{
    #####: 1447:	  state->coins += 3;
        -: 1448:	}	
        -: 1449:    }	
        -: 1450:
        -: 1451:  //add bonus
      300: 1452:  state->coins += bonus;
        -: 1453:
      300: 1454:  return 0;
        -: 1455:}
        -: 1456:
        -: 1457:
        -: 1458://end of dominion.c
        -: 1459:
