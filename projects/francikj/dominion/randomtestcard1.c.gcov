        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://randomtestcard1.c
        -:    2://testing Smithy
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:#include <math.h>
        -:   11:#include <time.h>
        -:   12:
        -:   13:#define MAX_TESTS 100
        -:   14:
      100:   15:int myAssert(int result, char *s){
      100:   16:   if(result == 1){
      100:   17:      printf("Test PASS\n");
      100:   18:      return 0;
        -:   19:   }else{
    #####:   20:   printf("Test FAIL\n result: %s\n", s);
    #####:   21:   return 1;
        -:   22:   }
        -:   23:}
        -:   24:
      100:   25:int AfterSmithy(struct gameState* state, int player, int past_handCount){
      100:   26:  printf("Pre-hand count = %d\n", past_handCount);
      100:   27:  printf("Post-hand count = %d\n", state->handCount[player]); 
      100:   28:  if(state->handCount[player] - 3 != past_handCount){
    #####:   29:      printf("TEST FAILED: 3 cards were not added to player's hand.\n");
    #####:   30:      return 0;
        -:   31:   }
      100:   32:   return 1;
        -:   33:}
        -:   34:
        1:   35:int main() {
        -:   36:   int r, i, players, handCount, deckCount, seed;
        -:   37:
        1:   38:   int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   39:                remodel, smithy, village, baron, great_hall};
        -:   40:
        -:   41:   struct gameState G;
        -:   42:
      101:   43:   for(i = 0; i < MAX_TESTS; i++){
      100:   44:      players = rand() % (MAX_PLAYERS - 1) + 2;
      100:   45:      seed = random();
        -:   46:
      100:   47:      r = initializeGame(players, k, 1, &G);
      100:   48:      assert(r ==0);
        -:   49:
      100:   50:      int currentPlayer = whoseTurn(&G);
      100:   51:      int nextPlayer = players + 1;
        -:   52:      int cardDrawn;
        -:   53:
      100:   54:      G.deckCount[currentPlayer] = rand() % MAX_DECK;
      100:   55:      G.discardCount[currentPlayer] = rand() % MAX_DECK;
      100:   56:      G.handCount[currentPlayer] = rand() % MAX_DECK;
        -:   57:
      100:   58:      handCount = G.handCount[currentPlayer];
      100:   59:      deckCount = G.deckCount[currentPlayer];
        -:   60:
      100:   61:      if(nextPlayer > (G.numPlayers -1)){
      100:   62:         nextPlayer = 0;
        -:   63:      }
        -:   64:
      100:   65:      cardEffect(smithy, 1, 1, 1, &G, 1, 1);
      100:   66:      myAssert(AfterSmithy(&G, currentPlayer, handCount), "bug!!");
        -:   67:   } 
        -:   68:
        1:   69:   printf("Tests Complete\n");
        -:   70:
        1:   71:   return 0;
        -:   72:}
