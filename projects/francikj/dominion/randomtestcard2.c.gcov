        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1://randomtestcard2.c
        -:    2://Testing steward
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:#include <math.h>
        -:   11:#include <time.h>
        -:   12:
        -:   13:#define MAX_TESTS 100
        -:   14:
function myAssert called 300 returned 100% blocks executed 100%
      300:   15:int myAssert(int result, char *s){
      300:   16:   if(result == 1){
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
       93:   17:      printf("Test PASS\n");
call    0 returned 100%
       93:   18:      return 0;
        -:   19:   }else{
      207:   20:   printf("Test FAIL\n result: %s\n", s);
call    0 returned 100%
      207:   21:   return 1;
        -:   22:   }
        -:   23:}
        -:   24:
function AfterSteward called 300 returned 100% blocks executed 89%
      300:   25:int AfterSteward(struct gameState* state, int player, int past_handCount, int choice, int past_coins){
      300:   26:   printf("Pre-hand count = %d\n", past_handCount);
call    0 returned 100%
      300:   27:   printf("Post-hand count = %d\n", state->handCount[player]);
call    0 returned 100%
      300:   28:   printf("Pre-coin count = %d\n", past_coins);
call    0 returned 100%
      300:   29:   printf("Post-coin count = %d\n", state->coins);
call    0 returned 100%
      300:   30:   printf("Pre-discard count = %d\n", past_handCount);
call    0 returned 100%
      300:   31:   printf("Post-discard count = %d\n", state->handCount[player]);
call    0 returned 100%
        -:   32:
      300:   33:   if(choice == 1){
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
      111:   34:      if(state->handCount[player] != (past_handCount + 2)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      111:   35:         printf("TEST FAILED: 2 cards were not added to player's hand.\n");
call    0 returned 100%
      111:   36:         return 0;
        -:   37:      }
        -:   38:   }
      189:   39:   if(choice == 2){
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
       93:   40:      if(state->coins != (past_coins + 2)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:         printf("TEST FAILED: 2 coins were not added to player.\n");
call    0 never executed
    #####:   42:         return 0;
        -:   43:      }
        -:   44:   }
        -:   45:   else{
       96:   46:      if(state->handCount[player] != (past_handCount - 2)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       96:   47:         printf("TEST FAILED: 2 cards were not discarded from the player's hand.\n");
call    0 returned 100%
       96:   48:         return 0;
        -:   49:      }
        -:   50:   }
        -:   51:   
       93:   52:   return 1;
        -:   53:}
        -:   54:
function main called 3 returned 100% blocks executed 95%
        3:   55:int main() {
        -:   56:   int r, i, players, handCount, deckCount, seed, choice, coins;
        -:   57:
        3:   58:   int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   59:                remodel, smithy, village, baron, great_hall};
        -:   60:
        -:   61:   struct gameState G;
        -:   62:
      303:   63:   for(i = 0; i < MAX_TESTS; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      300:   64:      players = rand() % (MAX_PLAYERS - 1) + 2;
call    0 returned 100%
      300:   65:      choice = rand() % 3 + 1;
call    0 returned 100%
      300:   66:      seed = random();
call    0 returned 100%
        -:   67:
      300:   68:      r = initializeGame(players, k, 1, &G);
call    0 returned 100%
      300:   69:      assert(r ==0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   70:
      300:   71:      int currentPlayer = whoseTurn(&G);
call    0 returned 100%
      300:   72:      int nextPlayer = players + 1;
        -:   73:      int cardDrawn;
        -:   74:
      300:   75:      G.deckCount[currentPlayer] = rand() % MAX_DECK;
call    0 returned 100%
      300:   76:      G.discardCount[currentPlayer] = rand() % MAX_DECK;
call    0 returned 100%
      300:   77:      G.handCount[currentPlayer] = rand() % MAX_DECK;
call    0 returned 100%
        -:   78:
      300:   79:      handCount = G.handCount[currentPlayer];
      300:   80:      deckCount = G.deckCount[currentPlayer];
      300:   81:      coins = G.coins;
        -:   82:
      300:   83:      if(nextPlayer > (G.numPlayers -1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      300:   84:         nextPlayer = 0;
        -:   85:      }
        -:   86:
      300:   87:      cardEffect(steward, choice, 1, 1, &G, 1, 1);
call    0 returned 100%
      300:   88:      myAssert(AfterSteward(&G, currentPlayer, handCount, choice, coins), "bug!!");
call    0 returned 100%
call    1 returned 100%
      300:   89:      printf("Re-check post hand count = %d\n", G.handCount[currentPlayer]);
call    0 returned 100%
        -:   90:   } 
        -:   91:
        3:   92:   printf("Tests Complete\n");
call    0 returned 100%
        -:   93:
        3:   94:   return 0;
        -:   95:}
        -:   96:
