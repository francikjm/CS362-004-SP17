        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        4:    8:void assertEqual(int result, int expected){
        4:    9:  if(result == expected)
        4:   10:    printf("Test PASS\n"); 
        -:   11:  else
    #####:   12:    printf("Test FAIL\n result: %i, expected: %i\n", result, expected);
        4:   13:}
        -:   14:
        2:   15:void checkDrawCard(int p, struct gameState *post) {
        -:   16:  struct gameState pre;
        2:   17:  memcpy (&pre, post, sizeof(struct gameState));
        -:   18:
        -:   19:  int r;
        2:   20:  r = drawCard (p, post);
        2:   21:  if (pre.deckCount[p] <= 0){
        1:   22:    assertEqual(r,-1);
        -:   23:  }
        2:   24:  if (pre.deckCount[p] > 0) {
        1:   25:    pre.handCount[p]++;
        1:   26:    pre.hand[p][pre.handCount[p]-1] = pre.deck[p][pre.deckCount[p]-1];
        1:   27:    pre.deckCount[p]--;
        1:   28:    assertEqual(r,0);
        1:   29:  } else if (pre.discardCount[p] > 0) {
    #####:   30:    memcpy(pre.deck[p], post->deck[p], sizeof(int) * pre.discardCount[p]);
    #####:   31:    memcpy(pre.discard[p], post->discard[p], sizeof(int)*pre.discardCount[p]);
    #####:   32:    pre.hand[p][post->handCount[p]-1] = post->hand[p][post->handCount[p]-1];
    #####:   33:    pre.handCount[p]++;
    #####:   34:    pre.deckCount[p] = pre.discardCount[p]-1;
    #####:   35:    pre.discardCount[p] = 0;
    #####:   36:    assertEqual(r,0);
        -:   37:  }
        -:   38:
        2:   39:  assertEqual(memcmp(&pre, post, sizeof(struct gameState)), 0);
        -:   40:  
        2:   41:}
        -:   42:
        1:   43:int main () {
        -:   44:
        -:   45:  int p; 
        -:   46:
        -:   47:  struct gameState G;
        -:   48:
        1:   49:    printf("Testing with cards\n");
        1:   50:    p = 2;
        1:   51:    G.deckCount[p] = 250;
        1:   52:    G.discardCount[p] = 250;
        1:   53:    G.handCount[p] = 150;
        1:   54:    checkDrawCard(p, &G);
        -:   55:
        1:   56:    printf("Testing with no cards available\n");
        1:   57:    p = 2;
        1:   58:    G.deckCount[p] = 0;
        1:   59:    G.discardCount[p] = 0;
        1:   60:    G.handCount[p] = 0;
        1:   61:    checkDrawCard(p, &G);
        -:   62:
        1:   63:  return 0;
        -:   64:}
        -:   65:
