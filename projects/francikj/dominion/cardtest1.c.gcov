        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Card Test 1: Adventurer
        -:    2:
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:
        3:   11:int assertEqual(int result, int expected){
        3:   12:  if(result == expected){
        2:   13:    printf("Test PASS\n");
        2:   14:    return 0;
        -:   15:    }else{
        1:   16:    printf("Test FAIL\n result: %i, expected: %i\n", result, expected);
        1:   17:    return 1;
        -:   18:    }
        -:   19:}
        -:   20:
        1:   21:int main () {
        -:   22:
        -:   23:  int r;
        -:   24:
        1:   25:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:               remodel, smithy, village, baron, great_hall};
        -:   27:
        -:   28:  struct gameState G;
        -:   29:
        1:   30:  r = initializeGame(2, k, 1, &G);
        -:   31:
        1:   32:  assert(r == 0);
        -:   33:
        1:   34:     int currentPlayer = whoseTurn(&G);
        1:   35:     int nextPlayer = currentPlayer + 1;
        1:   36:     int origdrawntreasure=0;
        1:   37:     int drawntreasure=0;
        -:   38:     int cardDrawn;
        1:   39:  if (nextPlayer > (G.numPlayers - 1)){
    #####:   40:    nextPlayer = 0;
        -:   41:  }
        -:   42:
        1:   43:     printf("Testing drawntreasure increments when treasure is drawn\n");
        1:   44:         cardDrawn = silver;
        1:   45:     if (cardDrawn != copper || cardDrawn == silver || cardDrawn == gold){
        1:   46:        drawntreasure++;
        -:   47:     }
        -:   48:     
        1:   49:       if((assertEqual(drawntreasure, origdrawntreasure + 1)) == 0){
        1:   50:         printf("Silver increments drawntreasure\n");
        -:   51:       }else
    #####:   52:         printf("Silver failed to increment drawntreasure\n");
        -:   53:        
        1:   54:     cardDrawn = gold;
        -:   55:     
        1:   56:     if (cardDrawn != copper || cardDrawn == silver || cardDrawn == gold){
        1:   57:        drawntreasure++;
        -:   58:     }
        -:   59:    
        1:   60:       if((assertEqual(drawntreasure, origdrawntreasure + 2)) == 0){
        1:   61:         printf("Gold increments drawntreasure\n");
        -:   62:       }else
    #####:   63:          printf("Gold failed to increment drawntreasure\n");
        -:   64:   
        1:   65:     cardDrawn = copper;
        -:   66:     
        1:   67:     if (cardDrawn != copper || cardDrawn == silver || cardDrawn == gold){
    #####:   68:        drawntreasure++;
        -:   69:     }
        1:   70:          if((assertEqual(drawntreasure, origdrawntreasure + 3)) == 0){
    #####:   71:          printf("Copper increments drawntreasure\n");
        -:   72:       }else
        1:   73:	  printf("Copper failed to increment drawntreasure\n");
        -:   74:       
        1:   75:   return 0;
        -:   76:}
        -:   77:
